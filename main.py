import os
import time
import requests
import json
from datetime import datetime
try:
    from dotenv import load_dotenv
    load_dotenv()  # Essayer de charger depuis .env si disponible
except:
    pass  # Continuer m√™me si le fichier .env n'existe pas ou si le module n'est pas install√©

# Configuration des API depuis les variables d'environnement et nettoyage des valeurs
AIRTABLE_API_KEY = os.getenv("AIRTABLE_API_KEY", "").strip()
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID", "").strip()
AIRTABLE_TABLE_NAME = os.getenv("AIRTABLE_TABLE_NAME", "").strip()

# Configuration de la base de donn√©es sp√©cifique pour les installateurs
AIRTABLE_INSTALLERS_BASE_ID = os.getenv("AIRTABLE_INSTALLERS_BASE_ID", "").strip()
AIRTABLE_INSTALLATEURS_TABLE = os.getenv("AIRTABLE_INSTALLATEURS_TABLE", "Installateurs").strip()

SELLSY_CONSUMER_TOKEN = os.getenv("SELLSY_CONSUMER_TOKEN", "").strip()
SELLSY_CONSUMER_SECRET = os.getenv("SELLSY_CONSUMER_SECRET", "").strip()
SELLSY_USER_TOKEN = os.getenv("SELLSY_USER_TOKEN", "").strip()
SELLSY_USER_SECRET = os.getenv("SELLSY_USER_SECRET", "").strip()

# Lien direct GoCardless
GOCARDLESS_DIRECT_LINK = os.getenv("GOCARDLESS_DIRECT_LINK", "https://pay.gocardless.com/BRT0003FA5F2M1Q").strip()

# ID du template d'email dans Sellsy
SELLSY_EMAIL_TEMPLATE_ID = "74"  # ID du template "Demande de mandat API"

# Param√®tres de l'application
LOG_DIR = os.getenv("LOG_DIR", "logs")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300"))  # 5 min par d√©faut

# URLS des APIs
AIRTABLE_API_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
AIRTABLE_INSTALLERS_API_URL = f"https://api.airtable.com/v0/{AIRTABLE_INSTALLERS_BASE_ID}/{AIRTABLE_INSTALLATEURS_TABLE}"
SELLSY_API_URL = "https://apifeed.sellsy.com/0/"

# Fonction de log
def log_activity(message):
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)
    log_file = os.path.join(LOG_DIR, f"log_{datetime.now().strftime('%Y-%m-%d')}.txt")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")
    print(message)

# V√©rifie les enregistrements Airtable
def check_airtable_changes():
    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }

    log_activity("üì° D√©but de la v√©rification des changements Airtable (pagination activ√©e)...")

    records = []
    offset = None

    while True:
        url = AIRTABLE_API_URL
        if offset:
            url += f"?offset={offset}"

        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            records.extend(data.get("records", []))
            offset = data.get("offset")
            if not offset:
                break
        else:
            log_activity(f"‚ùå Erreur Airtable pendant la r√©cup√©ration pagin√©e : {response.status_code} - {response.text}")
            break

    log_activity(f"üîç {len(records)} enregistrements r√©cup√©r√©s au total")

    for record in records:
        fields = record.get("fields", {})
        record_id = record.get("id")
        
        if fields.get("Contrat abonnement signe") and not fields.get("Email Mandat sellsy"):
            customer_name = fields.get("Nom", "Client")
            customer_email = fields.get("Email")
            customer_id = fields.get("ID_Sellsy", "").strip()
            installer_raw = fields.get("Installateur", "")
            signature_date = fields.get("Date de signature de contrat", "")
            
            installer_name = get_installer_name(installer_raw)

            log_activity(f"üì® Pr√©paration de l'email avec lien GoCardless direct pour : {customer_name} (Email: {customer_email}, ID Sellsy: {customer_id})")
            
            process_mandate_request(
                client_id=customer_id,
                record_id=record_id,
                installer_name=installer_name,
                signature_date=signature_date
            )
        elif fields.get("Email Mandat sellsy"):
            log_activity(f"‚è© Invitation d√©j√† envoy√©e pour {fields.get('Nom', 'Client')}, on ignore.")

    else:
        log_activity(f"‚ùå Erreur d'Airtable : {response.status_code} - {response.text}")

# R√©cup√®re le nom d'un installateur √† partir d'un ID ou d'une liste d'IDs
def get_installer_name(installer_data):
    # Si c'est une cha√Æne de caract√®res
    if isinstance(installer_data, str):
        # Si c'est un ID Airtable, r√©cup√©rer le nom depuis la base Airtable
        if installer_data.startswith("rec"):
            return get_installer_name_from_airtable(installer_data)
        return installer_data
    
    # Si c'est une liste d'IDs
    elif isinstance(installer_data, list) and len(installer_data) > 0:
        first_id = installer_data[0]
        if isinstance(first_id, str) and first_id.startswith("rec"):
            return get_installer_name_from_airtable(first_id)
        return str(first_id)
    
    # Valeur par d√©faut
    return "Installateur non sp√©cifi√©"

# R√©cup√®re le nom de l'installateur depuis Airtable
def get_installer_name_from_airtable(installer_id):
    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }
    
    url = f"{AIRTABLE_INSTALLERS_API_URL}/{installer_id}"
    
    try:
        log_activity(f"üîç R√©cup√©ration de l'installateur depuis: {url}")
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            installer_data = response.json()
            installer_name = installer_data.get("fields", {}).get("Nom", "Installateur non sp√©cifi√©")
            log_activity(f"‚úÖ Nom de l'installateur r√©cup√©r√©: {installer_name}")
            return installer_name
        else:
            log_activity(f"‚ùå Erreur lors de la r√©cup√©ration du nom de l'installateur: {response.status_code} - {response.text}")
            # Utiliser une valeur de repli si la r√©cup√©ration √©choue
            return "Installateur"
    except Exception as e:
        log_activity(f"‚ùå Exception lors de la r√©cup√©ration du nom de l'installateur: {str(e)}")
        return "Installateur"

# R√©cup√®re les informations client depuis Sellsy
def get_customer_info_from_sellsy(client_id):
    log_activity(f"üîç R√©cup√©ration des informations client de Sellsy pour l'ID {client_id}...")
    
    # On essaie d'abord avec l'ID en tant que cha√Æne
    client_info = _get_sellsy_client(client_id)
    
    # Si √ßa √©choue, on essaie avec l'ID converti en entier si possible
    if client_info is None:
        try:
            int_client_id = int(client_id)
            log_activity(f"üîÑ Tentative avec ID converti en entier: {int_client_id}")
            # Attendre une seconde pour √©viter les probl√®mes de nonce
            time.sleep(1)
            client_info = _get_sellsy_client(int_client_id)
        except ValueError:
            log_activity(f"‚ùå Impossible de convertir l'ID client '{client_id}' en entier")
    
    return client_info

# Fonction interne pour l'appel API Sellsy
def _get_sellsy_client(client_id):
    # Utiliser le timestamp avec millisecondes pour avoir un nonce vraiment unique
    nonce = str(int(time.time() * 1000))
    
    sellsy_request = {
        "method": "Client.getOne",
        "params": {
            "clientid": client_id
        }
    }
    
    log_activity(f"üîß Param√®tres requ√™te Sellsy: {json.dumps(sellsy_request)}")
    
    oauth_params = {
        "oauth_consumer_key": SELLSY_CONSUMER_TOKEN,
        "oauth_token": SELLSY_USER_TOKEN,
        "oauth_nonce": nonce,
        "oauth_timestamp": nonce,
        "oauth_signature_method": "PLAINTEXT",
        "oauth_version": "1.0",
        "oauth_signature": f"{SELLSY_CONSUMER_SECRET}&{SELLSY_USER_SECRET}",
        "io_mode": "json",
        "do_in": json.dumps(sellsy_request)
    }
    
    try:
        response = requests.post(SELLSY_API_URL, data=oauth_params)
        log_activity(f"üìä Code de r√©ponse Sellsy: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            log_activity(f"üìù R√©ponse Sellsy: {json.dumps(result)[:200]}...")  # Affiche les 200 premiers caract√®res
            
            if result.get("status") == "success":
                client_data = result.get("response", {})
                
                # Extraire les informations n√©cessaires √† partir de la structure correcte
                corporation = client_data.get("corporation", {})
                contact = client_data.get("contact", {})
                
                # Extraction correcte des donn√©es de la r√©ponse Sellsy
                customer_info = {
                    "first_name": contact.get("forename", ""),
                    "last_name": contact.get("name", ""),
                    "email": corporation.get("email", ""),
                    "company": corporation.get("name", ""),
                    "phone": corporation.get("mobile", "")
                }
                
                # V√©rification des donn√©es importantes
                if not customer_info["email"] or not customer_info["first_name"]:
                    log_activity(f"‚ùå Informations client incompl√®tes: email={customer_info['email']}, pr√©nom={customer_info['first_name']}, nom={customer_info['last_name']}")
                    return None
                
                log_activity(f"‚úÖ Informations client r√©cup√©r√©es avec succ√®s: {customer_info['first_name']} {customer_info['last_name']}")
                return customer_info
            else:
                log_activity(f"‚ùå Erreur API Sellsy lors de la r√©cup√©ration client: {result.get('error')}")
                return None
        else:
            log_activity(f"‚ùå Erreur HTTP Sellsy: {response.status_code}")
            log_activity(f"üìÑ D√©tail de la r√©ponse: {response.text}")
            return None
    except Exception as e:
        log_activity(f"‚ùå Exception lors de la r√©cup√©ration client: {str(e)}")
        return None

# Envoie un email personnalis√© via l'API Sellsy en utilisant le template email
def send_email_via_sellsy_template(client_id, customer_info, installer_name, gocardless_link, signature_date):
    log_activity(f"üì§ Envoi de l'email via le template Sellsy √† {customer_info['email']}...")
    
    # Utiliser un nonce unique avec millisecondes
    nonce = str(int(time.time() * 1000))
    
    # Tenter la conversion en entier pour l'ID client
    try:
        client_id_param = int(client_id)
    except ValueError:
        client_id_param = client_id
    
    # Variables √† remplacer dans le template
    custom_vars = {
        "Installateur": installer_name,
        "lienGoCardless": gocardless_link,
        "Date de signature de contrat": signature_date
    }
    
    # Structure modifi√©e pour correspondre √† vos besoins
    email_params = {
        "linkedtype": "third",
        "linkedid": client_id_param,
        "emails": [customer_info["email"]],
        "templateId": SELLSY_EMAIL_TEMPLATE_ID,
        "addsendertoemail": "N",  # Ne pas mettre l'exp√©diteur en copie
        "fromName": "SUNLIB",     # Nom d'exp√©diteur personnalis√©
        "fromEmail": "abonne@sunlib.fr",  # Email d'exp√©diteur personnalis√©
        "customvars": custom_vars  # Variables √† remplacer dans le template
    }
    
    sellsy_request = {
        "method": "Mails.sendOne",
        "params": {
            "email": email_params
        }
    }
    
    log_activity(f"üîß Param√®tres requ√™te email Sellsy: {json.dumps(sellsy_request)}")
    
    oauth_params = {
        "oauth_consumer_key": SELLSY_CONSUMER_TOKEN,
        "oauth_token": SELLSY_USER_TOKEN,
        "oauth_nonce": nonce,
        "oauth_timestamp": nonce,
        "oauth_signature_method": "PLAINTEXT",
        "oauth_version": "1.0",
        "oauth_signature": f"{SELLSY_CONSUMER_SECRET}&{SELLSY_USER_SECRET}",
        "io_mode": "json",
        "do_in": json.dumps(sellsy_request)
    }
    
    try:
        response = requests.post(SELLSY_API_URL, data=oauth_params)
        log_activity(f"üìä Code de r√©ponse email Sellsy: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get("status") == "success":
                log_activity(f"‚úÖ Email envoy√© avec succ√®s √† {customer_info['email']} via le template {SELLSY_EMAIL_TEMPLATE_ID}")
                return True
            else:
                log_activity(f"‚ùå Erreur API Sellsy lors de l'envoi email: {result.get('error')}")
                log_activity(f"üìÑ D√©tail de la r√©ponse: {json.dumps(result)}")
                return False
        else:
            log_activity(f"‚ùå Erreur HTTP Sellsy: {response.status_code}")
            log_activity(f"üìÑ D√©tail de la r√©ponse: {response.text}")
            return False
    except Exception as e:
        log_activity(f"‚ùå Exception lors de l'envoi email: {str(e)}")
        return False

# Processus pour g√©rer une demande de mandat
def process_mandate_request(client_id, record_id, installer_name, signature_date):
    log_activity(f"üîÑ Traitement de la demande de mandat pour client {client_id}...")
    
    # 1. R√©cup√©rer les informations du client
    customer_info = get_customer_info_from_sellsy(client_id)
    if not customer_info:
        log_activity("‚ùå Impossible de poursuivre sans les informations du client")
        return
    
    # V√©rification des informations du client
    if not customer_info["email"] or not customer_info["first_name"]:
        log_activity("‚ùå Informations client incompl√®tes (email ou nom manquant)")
        return
    
    # 2. Utiliser le lien GoCardless direct d√©fini en haut du script
    if not GOCARDLESS_DIRECT_LINK:
        log_activity("‚ùå Lien GoCardless direct non disponible")
        return
    
    # Petit d√©lai pour √©viter les probl√®mes de rate limiting
    time.sleep(1)
    
    # 3. Envoyer l'email via le template Sellsy avec le lien direct
    email_sent = send_email_via_sellsy_template(
        client_id=client_id,
        customer_info=customer_info,
        installer_name=installer_name,
        gocardless_link=GOCARDLESS_DIRECT_LINK,
        signature_date=signature_date
    )
    
    if email_sent:
        # 4. Mettre √† jour Airtable pour marquer l'email comme envoy√©
        mark_email_sent_in_airtable(record_id)
    else:
        log_activity("‚ùå L'email n'a pas pu √™tre envoy√©, la mise √† jour Airtable n'est pas effectu√©e")

# Marque la case "Email Mandat sellsy" dans Airtable
def mark_email_sent_in_airtable(record_id):
    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }
    
    log_activity(f"üîÑ Mise √† jour de l'enregistrement Airtable {record_id}...")
    
    # Mettre √† jour uniquement les champs qui existent dans Airtable
    data = {
        "fields": {
            "Email Mandat sellsy": True,  # Assurez-vous que le nom du champ est exact
            "Date envoi mandat": datetime.now().strftime("%Y-%m-%d")
        }
    }
    
    log_activity(f"üìù Donn√©es pour la mise √† jour: {json.dumps(data)}")
    
    response = requests.patch(f"{AIRTABLE_API_URL}/{record_id}", headers=headers, json=data)
    if response.status_code == 200:
        log_activity("‚úÖ Champ 'Email Mandat sellsy' mis √† jour dans Airtable.")
        # Afficher les d√©tails de la r√©ponse pour v√©rifier
        log_activity(f"üìÑ D√©tail de la r√©ponse Airtable: {json.dumps(response.json())}")
    else:
        log_activity(f"‚ùå Erreur mise √† jour Airtable : {response.status_code} - {response.text}")

# Fonction de v√©rification des configurations API
def check_api_configurations():
    log_activity("üîç V√©rification des configurations API...")
    
    config_ok = True
    
    # V√©rification Airtable
    if not AIRTABLE_API_KEY or not AIRTABLE_BASE_ID or not AIRTABLE_TABLE_NAME:
        log_activity("‚ùå Configuration Airtable incompl√®te")
        config_ok = False
    
    # V√©rification de la base des installateurs
    if not AIRTABLE_INSTALLERS_BASE_ID:
        log_activity("‚ö†Ô∏è Configuration base des installateurs manquante (AIRTABLE_INSTALLERS_BASE_ID)")
        log_activity("‚ö†Ô∏è Les noms d'installateurs ne seront pas r√©cup√©r√©s correctement")
    
    # V√©rification Sellsy
    if not SELLSY_CONSUMER_TOKEN or not SELLSY_CONSUMER_SECRET or not SELLSY_USER_TOKEN or not SELLSY_USER_SECRET:
        log_activity("‚ùå Configuration Sellsy incompl√®te")
        config_ok = False
    
    if config_ok:
        log_activity("‚úÖ Toutes les configurations API sont pr√©sentes")
    else:
        # Afficher des valeurs masqu√©es pour aider au d√©bogage
        log_activity(f"AIRTABLE_API_KEY: {'D√©fini' if AIRTABLE_API_KEY else 'Non d√©fini'}")
        log_activity(f"AIRTABLE_INSTALLERS_BASE_ID: {'D√©fini' if AIRTABLE_INSTALLERS_BASE_ID else 'Non d√©fini'}")
        log_activity(f"SELLSY_CONSUMER_TOKEN: {'D√©fini' if SELLSY_CONSUMER_TOKEN else 'Non d√©fini'}")
        log_activity(f"SELLSY_USER_TOKEN: {'D√©fini' if SELLSY_USER_TOKEN else 'Non d√©fini'}")
    
    return config_ok

# Test de connexion aux APIs
def test_api_connections():
    log_activity("üß™ Test des connexions API...")
    
    # Test Airtable
    try:
        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }
        response = requests.get(AIRTABLE_API_URL, headers=headers, params={"maxRecords": 1})
        if response.status_code == 200:
            log_activity("‚úÖ Connexion √† Airtable r√©ussie")
        else:
            log_activity(f"‚ùå √âchec connexion Airtable: {response.status_code} - {response.text}")
    except Exception as e:
        log_activity(f"‚ùå Exception test Airtable: {str(e)}")
    
    # Test Airtable Table des installateurs
    try:
        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }
        response = requests.get(AIRTABLE_INSTALLERS_API_URL, headers=headers, params={"maxRecords": 1})
        if response.status_code == 200:
            log_activity(f"‚úÖ Connexion √† la table Airtable '{AIRTABLE_INSTALLATEURS_TABLE}' r√©ussie")
        else:
            log_activity(f"‚ö†Ô∏è √âchec connexion √† la table '{AIRTABLE_INSTALLATEURS_TABLE}': {response.status_code} - {response.text}")
    except Exception as e:
        log_activity(f"‚ö†Ô∏è Exception test Airtable Installateurs: {str(e)}")
    
    # Test Sellsy - R√©cup√©ration liste de clients
    try:
        # Utiliser un nonce unique avec millisecondes
        nonce = str(int(time.time() * 1000))
        sellsy_request = {
            "method": "Client.getList",
            "params": {
                "pagination": {"nbperpage": 1}
            }
        }
        oauth_params = {
            "oauth_consumer_key": SELLSY_CONSUMER_TOKEN,
            "oauth_token": SELLSY_USER_TOKEN,
            "oauth_nonce": nonce,
            "oauth_timestamp": nonce,
            "oauth_signature_method": "PLAINTEXT",
            "oauth_version": "1.0",
            "oauth_signature": f"{SELLSY_CONSUMER_SECRET}&{SELLSY_USER_SECRET}",
            "io_mode": "json",
            "do_in": json.dumps(sellsy_request)
        }
        response = requests.post(SELLSY_API_URL, data=oauth_params)
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success":
                log_activity("‚úÖ Connexion √† Sellsy r√©ussie")
            else:
                log_activity(f"‚ùå √âchec API Sellsy: {result.get('error')}")
        else:
            log_activity(f"‚ùå √âchec connexion Sellsy: {response.status_code} - {response.text}")
    except Exception as e:
        log_activity(f"‚ùå Exception test Sellsy: {str(e)}")

# Fonction principale
def main():
    log_activity("üöÄ Lancement de la surveillance Airtable...")
    
    # V√©rifier les configurations
    if not check_api_configurations():
        log_activity("‚ö†Ô∏è Certaines configurations sont manquantes, le programme pourrait ne pas fonctionner correctement")
    
    # Tester les connexions API avant de commencer
    test_api_connections()
    
    # Si ex√©cut√© dans GitHub Actions, faire une seule v√©rification
    if os.getenv("GITHUB_ACTIONS"):
        log_activity("üîç Ex√©cution unique dans GitHub Actions")
        check_airtable_changes()
    else:
        # Boucle continue pour ex√©cution locale
        try:
            while True:
                check_airtable_changes()
                log_activity(f"üïí Attente {CHECK_INTERVAL} secondes avant le prochain check.")
                time.sleep(CHECK_INTERVAL)
        except KeyboardInterrupt:
            log_activity("üõë Surveillance interrompue par l'utilisateur.")

if __name__ == "__main__":
    main()
